{"version":3,"mappings":"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","names":["BACKEND_URL","logRateLimitInfo","responseData","apiName","info","osm","percentUsed","backend","backendPercentUsed","handleAPIResponseWithRateLimit","response","errorData","retryAfter","handleTokenExpiration","errorMessage","errorLower","data","isTokenValid","getMostRecentTermId","sectionId","token","getToken","termsArray","mostRecentTerm","b","dateA","error","getUserRoles","_rateLimitInfo","sectionsData","getEvents","sectionid","termid","getEventAttendance","eventId","termId","getStatusColor","status","addSummaryPersonExpandFunctionality","row","personIdx","detailsRow","expandIcon","addSummaryTableSorting","attendeesByPerson","sortableHeaders","currentSort","header","sortColumn","tbody","rows","h","comparison","lnc","tYA","tNA","tYB","tNB","totalA","totalB","rA","rB","index","addSummaryAttendeeFiltering","originalAttendees","sectionFilter","eventFilter","statusFilter","nameFilter","clearButton","applyFilters","sectionVal","eventVal","statusVal","nameVal","visibleCount","personKey","person","nameMatch","eventsMatch","evt","f","renderSummaryAttendanceTable","attendees","summaryContent","attendee","uniqueSections","a","uniqueEvents","uniqueStatuses","isMobile","html","s","e","st","event","renderGroupedAttendanceTable","groupedContent","groupedAttendees","statusPriority","sortedStatuses","pA","pB","htmlParts","records","isExpanded","collapseId","color","renderCampGroupsTable","campGroupsContent","uniqueAttendees","nameKey","uniqueAttendeesList","renderTabbedAttendanceView","attendancePanel","tabsHtml","switchAttendanceTab","tabType","tab","pane","handleSectionSelect","selectedSectionIds","currentSectionsData","showError","showBlockedScreen","showSpinner","allEvents","sectionIdToName","section","eventsData","eventsWithSectionName","renderEventsTable","events","handleEventSelect","err","hideSpinner","selectedEvents","allAttendees","attendanceData","eventAttendees","eventError","SECTIONS_CACHE_KEY","SECTIONS_CACHE_EXPIRY","saveSectionsToCache","sections","cacheData","getSectionsFromCache","cached","clearSectionsCache","loadSectionsFromCacheOrAPI","SPINNER_TYPES","currentSpinnerType","setDefaultSpinner","type","text","spinnerType","overlay","createFallbackSpinner","textEl","spinnerContainer","spinner","createSpinner","fallback","msg","toast","renderSectionsTable","onSelectionChange","container","sectionName","checkbox","selectedSections","cb","eventsContainer","onLoadAttendees","forceMobileLayout","idx","totalYes","totalNo","showMainUI","mainContainer","initializeSidebar","sidebar","addLogoutButton","toggleBtn","closeSidebar","updateSidebarToggleVisibility","sidebarToggle","isLoginScreen","_a","showLoadingState","clientId","scope","clearToken","showLoginScreen","redirectUri","existingLoginBtn","authUrl","loginBtn","checkForToken","logoutBtn","PREFERRED_SPINNER","__vitePreload","currentSections","sectionsContainer","selectedIds","showFallbackError","body","errorDiv"],"ignoreList":[],"sources":["../../src/lib/api.js","../../src/ui/attendance.js","../../src/lib/handlers.js","../../src/lib/cache.js","../../src/ui.js","../../src/lib/auth.js","../../src/main.js"],"sourcesContent":["// src/lib/api.js\n// This module is the central handler for all HTTP requests to the backend API.\n// It abstracts data fetching logic, including token management, error handling,\n// and rate limit monitoring, providing a consistent interface for API interactions.\n\n// Imports from auth.js\nimport { getToken, isTokenValid, handleTokenExpiration } from './auth.js';\n\n// Always use production backend - simplifies configuration and avoids local setup issues\nconst BACKEND_URL = 'https://vikings-osm-event-manager.onrender.com';\n\nconsole.log('Using Backend URL:', BACKEND_URL);\n\n// Checks a sessionStorage flag ('osm_blocked') to see if OSM API access\n// has been previously identified as blocked. Throws an error if blocked.\nfunction checkIfBlocked() {\n    if (sessionStorage.getItem('osm_blocked') === 'true') {\n        throw new Error('OSM API access has been blocked. Please contact the system administrator.');\n    }\n}\n\n// Removes the 'osm_blocked' flag from sessionStorage.\n// This is intended for administrative use to re-enable API access after a block.\nexport function clearBlockedStatus() {\n    sessionStorage.removeItem('osm_blocked');\n    console.log('OSM blocked status cleared');\n}\n\n// Enhanced rate limit monitoring for backend-provided rate limit info\nfunction logRateLimitInfo(responseData, apiName) {\n    if (responseData && responseData._rateLimitInfo) {\n        const info = responseData._rateLimitInfo;\n        \n        // Log OSM rate limit info\n        if (info.osm) {\n            const osm = info.osm;\n            const percentUsed = osm.limit > 0 ? ((osm.limit - osm.remaining) / osm.limit * 100).toFixed(1) : 0;\n            \n            console.group(`🔄 ${apiName} Rate Limit Status`);\n            console.log(`📊 OSM API:`, {\n                remaining: `${osm.remaining}/${osm.limit}`,\n                percentUsed: `${percentUsed}%`,\n                window: osm.window || 'per hour',\n                available: osm.available,\n                rateLimited: osm.rateLimited || false\n            });\n            \n            // Warn when getting close to OSM limit\n            if (osm.remaining < 20 && osm.limit > 0) {\n                console.warn(`⚠️ OSM rate limit warning for ${apiName}: Only ${osm.remaining} requests remaining (${percentUsed}% used)!`);\n            }\n            \n            if (osm.remaining < 10 && osm.limit > 0) {\n                console.error(`🚨 CRITICAL: Only ${osm.remaining} OSM requests remaining for ${apiName}! (${percentUsed}% used)`);\n            }\n        }\n        \n        // Log backend rate limit info (less critical but useful)\n        if (info.backend) {\n            const backend = info.backend;\n            const backendPercentUsed = backend.limit > 0 ? (((backend.limit - backend.remaining) / backend.limit) * 100).toFixed(1) : 0;\n            \n            console.log(`🖥️ Backend API:`, {\n                remaining: `${backend.remaining}/${backend.limit}`,\n                percentUsed: `${backendPercentUsed}%`,\n                window: backend.window || 'per minute'\n            });\n        }\n        \n        console.groupEnd();\n    } else {\n        console.log(`📊 ${apiName}: No rate limit info available`);\n    }\n}\n\n// Enhanced API response handler with new rate limit monitoring\nasync function handleAPIResponseWithRateLimit(response, apiName) {\n    // Handle rate limiting (HTTP 429 Too Many Requests).\n    // This can be triggered by either the OSM API or the backend itself.\n    if (response.status === 429) {\n        const errorData = await response.json().catch(() => ({})); // Attempt to parse error details\n        \n        // Check if this is OSM rate limiting or backend rate limiting\n        if (errorData.rateLimitInfo) {\n            const retryAfter = errorData.rateLimitInfo.retryAfter || 'unknown time';\n            console.warn(`🚫 ${apiName} rate limited by OSM. Backend managing retry. Wait: ${retryAfter}s`);\n            \n            if (errorData.rateLimitInfo.retryAfter) {\n                throw new Error(`OSM API rate limit exceeded. Please wait ${errorData.rateLimitInfo.retryAfter} seconds before trying again.`);\n            } else {\n                throw new Error('OSM API rate limit exceeded. Please wait before trying again.');\n            }\n        } else {\n            // General backend rate limiting message.\n            console.warn(`🚫 ${apiName} rate limited. Backend managing request flow.`);\n            throw new Error('Rate limited. The backend is managing request flow to prevent blocking.');\n        }\n    }\n    \n    // Handle authentication errors (HTTP 401 Unauthorized, HTTP 403 Forbidden).\n    // Triggers token expiration handling.\n    if (response.status === 401 || response.status === 403) {\n        console.warn(`🔐 Authentication error on ${apiName}: ${response.status}`);\n        handleTokenExpiration(); // Clear token and prompt for login\n        return null;\n    }\n    \n    // Handle other non-successful HTTP responses.\n    if (!response.ok) {\n        const errorData = await response.json().catch(() => ({})); // Attempt to parse error details\n        const errorMessage = errorData.message || errorData.error || `HTTP ${response.status}`; // Extract error message\n        \n        // Check for OSM blocking/critical errors\n        if (errorMessage && typeof errorMessage === 'string') {\n            const errorLower = errorMessage.toLowerCase();\n            if (errorLower.includes('blocked') || errorLower.includes('permanently blocked')) {\n                console.error(`🚨 CRITICAL: OSM API BLOCKED on ${apiName}!`, errorMessage);\n                sessionStorage.setItem('osm_blocked', 'true');\n                throw new Error(`OSM API BLOCKED: ${errorMessage}`);\n            }\n        }\n        \n        console.error(`❌ ${apiName} API error:`, errorMessage);\n        throw new Error(`${apiName} failed: ${errorMessage}`);\n    }\n    \n    // If the response is OK, attempt to parse it as JSON.\n    try {\n        const data = await response.json();\n        \n        // Log rate limit information included in the response.\n        logRateLimitInfo(data, apiName);\n        \n        // Validate the token if present in the response data (some endpoints might return it).\n        if (!isTokenValid(data)) {\n            console.warn(`🔐 Token invalid in ${apiName} response`);\n            handleTokenExpiration(); // Clear token and prompt for login\n            return null;\n        }\n        \n        return data; // Return the parsed data\n    } catch (jsonError) {\n        // Handle cases where JSON parsing fails.\n        console.error(`❌ ${apiName} returned invalid JSON`);\n        throw new Error(`${apiName} returned invalid response`);\n    }\n}\n\n// Optional rate limit status checker.\n// Fetches current rate limit status from the backend.\n// Returns an object with rate limit details (osm and backend) or null on failure.\nexport async function checkRateLimitStatus() {\n    try {\n        const response = await fetch(`${BACKEND_URL}/rate-limit-status`, {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' }\n        });\n        \n        if (response.ok) {\n            const statusData = await response.json();\n            if (statusData.rateLimitInfo || statusData._rateLimitInfo) {\n                const info = statusData.rateLimitInfo || statusData._rateLimitInfo;\n                logRateLimitInfo({ _rateLimitInfo: info }, 'Rate Limit Status Check');\n                return info;\n            }\n        }\n    } catch (error) {\n        console.warn('Could not fetch rate limit status:', error);\n    }\n    return null;\n}\n\n// Fetches terms for a given section.\n// sectionId: The ID of the section for which to fetch terms.\n// Returns an array of term objects for the specified section, or an empty array on failure.\n// Expected term object structure: { termid: string, name: string, startdate: string, enddate: string, ... }\nexport async function getTermsForSection(sectionId) {\n    const token = getToken();\n    if (!token) return [];\n    const response = await fetch(`${BACKEND_URL}/get-terms`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ access_token: token })\n    });\n    const data = await handleAPIResponseWithRateLimit(response, 'getTermsForSection');\n    // The API returns an object where keys are section IDs and values are arrays of terms.\n    return data ? (data[sectionId] || []) : [];\n}\n\n// Fetches the most recent term ID for a given section.\n// sectionId: The ID of the section.\n// Returns the termid (string) of the most recent term, or null if not found or on error.\nexport async function getMostRecentTermId(sectionId) {\n    try {\n        const token = getToken();\n        if (!token) {\n            handleTokenExpiration();\n            return null;\n        }\n\n        const response = await fetch(`${BACKEND_URL}/get-terms`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n                access_token: token,\n                sectionid: sectionId \n            })\n        });\n\n        const data = await handleAPIResponseWithRateLimit(response, 'getMostRecentTermId');\n        if (!data) return null;\n        \n        console.log('Terms API response for section', sectionId, ':', data);\n        \n        // Handle different response formats\n        let termsArray = null;\n        \n        if (data.items && Array.isArray(data.items)) {\n            // Format: { items: [...] }\n            termsArray = data.items;\n        } else if (data[sectionId] && Array.isArray(data[sectionId])) {\n            // Format: { \"sectionId\": [...] }\n            termsArray = data[sectionId];\n        } else if (Array.isArray(data)) {\n            // Format: [...]\n            termsArray = data;\n        } else {\n            console.warn('Unexpected terms response format:', data);\n            return null;\n        }\n        \n        if (!termsArray || termsArray.length === 0) {\n            console.warn('No terms found for section:', sectionId);\n            return null;\n        }\n\n        // Sort terms by start date (most recent first)\n        const sortedTerms = termsArray.sort((a, b) => {\n            const dateA = new Date(a.startdate);\n            const dateB = new Date(b.startdate);\n            return dateB - dateA; // Descending order (newest first)\n        });\n\n        const mostRecentTerm = sortedTerms[0];\n        console.log('Most recent term found for section', sectionId, ':', mostRecentTerm);\n        return mostRecentTerm.termid;\n\n    } catch (error) {\n        console.error('Error fetching most recent term ID:', error);\n        return null;\n    }\n}\n\n// Fetches the roles (sections) associated with the current authenticated user.\n// Returns an array of section objects.\n// Expected section object structure: { sectionid: string, sectionname: string, groupname: string, ... }\nexport async function getUserRoles() {\n    try {\n        const token = getToken();\n        if (!token) {\n            handleTokenExpiration();\n            return [];\n        }\n\n        const response = await fetch(`${BACKEND_URL}/get-user-roles`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ access_token: token })\n        });\n        \n        const data = await handleAPIResponseWithRateLimit(response, 'getUserRoles');\n        if (!data) return [];\n        \n        // Handle the response format - convert object with numbered keys to array\n        // Remove _rateLimitInfo from the data before processing\n        const { _rateLimitInfo, ...sectionsData } = data;\n        \n        // Convert object with numbered keys to array\n        const sectionsArray = Object.values(sectionsData);\n        \n        return sectionsArray;\n        \n    } catch (error) {\n        console.error('Error fetching user roles:', error);\n        throw error;\n    }\n}\n\n// Fetches events for a specific section and term.\n// sectionid: The ID of the section.\n// termid: The ID of the term.\n// Returns an object, typically { items: [...] }, where items is an array of event objects.\n// Expected event object structure: { eventid: string, name: string, startdate: string, ... }\nexport async function getEvents(sectionid, termid) {\n    try {\n        const token = getToken();\n        if (!token) {\n            handleTokenExpiration();\n            return { items: [] };\n        }\n\n        const response = await fetch(`${BACKEND_URL}/get-events`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ access_token: token, sectionid, termid })\n        });\n\n        const data = await handleAPIResponseWithRateLimit(response, 'getEvents');\n        return data || { items: [] };\n\n    } catch (error) {\n        console.error('Error fetching events:', error);\n        throw error;\n    }\n}\n\n// Fetches attendance data for a specific event.\n// sectionId: The ID of the section.\n// eventId: The ID of the event.\n// termId: The ID of the term.\n// Returns an object, typically { items: [...] }, where items is an array of attendance records.\n// Expected attendance record structure: { memberid: string, firstname: string, lastname: string, attended: boolean, ... }\nexport async function getEventAttendance(sectionId, eventId, termId) {\n    try {\n        const token = getToken();\n        if (!token) {\n            handleTokenExpiration();\n            return { items: [] };\n        }\n\n        console.log('API call with params:', { sectionId, eventId, termId });\n\n        const response = await fetch(`${BACKEND_URL}/get-event-attendance`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n                access_token: token, \n                sectionid: sectionId, \n                eventid: eventId,\n                termid: termId\n            })\n        });\n\n        console.log('API response status:', response.status);\n\n        const data = await handleAPIResponseWithRateLimit(response, 'getEventAttendance');\n        console.log('API response data:', data);\n        \n        return data || { items: [] };\n\n    } catch (error) {\n        console.error('Error fetching event attendance:', error);\n        throw error;\n    }\n}\n\n// Fetches flexi-attendance records for a section.\n// sectionId: The ID of the section.\n// archived: (Optional) 'y' to fetch archived records, 'n' for current (defaults to 'n').\n// Returns an object, typically { items: [...] }, where items is an array of flexi-record objects.\n// Expected flexi-record structure: { record_id: string, member_id: string, date_given: string, ... }\nexport async function getFlexiRecords(sectionId, archived = 'n') {\n    try {\n        // Check if API access has been blocked\n        checkIfBlocked();\n        \n        const token = getToken();\n        if (!token) {\n            handleTokenExpiration();\n            return { items: [] };\n        }\n\n        const response = await fetch(`${BACKEND_URL}/get-flexi-records`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                access_token: token,\n                sectionid: sectionId,\n                archived: archived\n            })\n        });\n\n        const data = await handleAPIResponseWithRateLimit(response, 'getFlexiRecords');\n        return data || { items: [] };\n\n    } catch (error) {\n        console.error('Error fetching flexi records:', error);\n        throw error;\n    }\n}\n\n// Tests the connectivity to the backend server.\n// Makes a GET request to the /health endpoint.\n// Returns true if the backend responds with HTTP 200, false otherwise.\nexport async function testBackendConnection() {\n    try {\n        console.log('Testing backend connection to:', BACKEND_URL);\n        const response = await fetch(`${BACKEND_URL}/health`, {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' }\n        });\n        \n        console.log('Backend connection test - Status:', response.status);\n        \n        if (response.ok) {\n            const data = await response.text();\n            console.log('Backend connection test - Response:', data);\n            return true;\n        } else {\n            console.error('Backend connection test failed:', response.status);\n            return false;\n        }\n    } catch (error) {\n        console.error('Backend connection test error:', error);\n        return false;\n    }\n}","// src/ui/attendance.js\n// This module is dedicated to rendering the various views within the attendance panel.\n// It handles the presentation of detailed attendance data, including:\n// - A summary table with per-person attendance totals and expandable details.\n// - A grouped list view, categorizing attendees by their status (e.g., Yes, No, Invited).\n// - A simple list for camp group planning.\n// The module also includes helper functions for styling, sorting, filtering, and DOM manipulation\n// specific to these attendance views.\n\n// Helper function (internal to this module)\n// Returns a Bootstrap color name (e.g., 'success', 'danger') based on the attendance status string.\n// Used for styling status badges and indicators.\nfunction getStatusColor(status) {\n    switch (status?.toLowerCase()) {\n        case 'yes': case 'attended': case 'present': return 'success'; // Green for positive statuses\n        case 'no': case 'absent': case 'not attended': return 'danger'; // Red for negative statuses\n        case 'maybe': case 'unknown': return 'warning'; // Yellow for uncertain statuses\n        default: return 'secondary'; // Grey for other/unknown statuses\n    }\n}\n\n// Helper function (internal to this module)\n// Attaches click event listeners to person rows in the summary attendance table\n// to toggle the visibility of their detailed event attendance.\nfunction addSummaryPersonExpandFunctionality() {\n    document.querySelectorAll('.summary-person-row').forEach(row => {\n        row.addEventListener('click', function() {\n            const personIdx = this.dataset.personIdx; // Get person index from data attribute\n            const detailsRow = document.getElementById(`summary-person-details-${personIdx}`); // Find corresponding details row\n            const expandIcon = this.querySelector('.summary-expand-icon'); // Find expand/collapse icon\n            if (detailsRow.style.display === 'none') {\n                detailsRow.style.display = ''; // Show details\n                expandIcon.textContent = '▲'; // Change icon to indicate 'collapse'\n                this.classList.add('expanded'); // Add class for styling expanded row\n            } else {\n                detailsRow.style.display = 'none'; // Hide details\n                expandIcon.textContent = '▼'; // Change icon to indicate 'expand'\n                this.classList.remove('expanded'); // Remove expanded class\n            }\n        });\n    });\n}\n\n// Helper function (internal to this module)\n// Adds click event listeners to sortable table headers in the summary attendance table.\n// Sorts the table rows based on the clicked header's data-sort attribute.\n// attendeesByPerson: The aggregated data used for sorting (not directly, but context).\nfunction addSummaryTableSorting(attendeesByPerson) {\n    const sortableHeaders = document.querySelectorAll('#summary-attendance-table .sortable');\n    let currentSort = { column: null, direction: 'asc' }; // Keep track of current sort state\n\n    sortableHeaders.forEach(header => {\n        header.addEventListener('click', function() {\n            const sortColumn = this.dataset.sort; // Get column to sort by\n            const tbody = document.getElementById('summary-attendance-tbody');\n            const rows = Array.from(tbody.querySelectorAll('.summary-person-row')); // Get all person rows\n\n            // Determine sort direction\n            if (currentSort.column === sortColumn) {\n                currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';\n            } else {\n                currentSort.direction = 'asc';\n            }\n            currentSort.column = sortColumn;\n\n            // Update header styling for sort indicators\n            sortableHeaders.forEach(h => h.classList.remove('sort-asc', 'sort-desc'));\n            this.classList.add(currentSort.direction === 'asc' ? 'sort-asc' : 'sort-desc');\n\n            // Sort logic based on column\n            rows.sort((a, b) => {\n                let comparison = 0;\n                switch (sortColumn) {\n                    case 'firstname': comparison = a.dataset.firstname.toLowerCase().localeCompare(b.dataset.firstname.toLowerCase()); break;\n                    case 'lastname': comparison = a.dataset.lastname.toLowerCase().localeCompare(b.dataset.lastname.toLowerCase()); break;\n                    case 'name': // Sort by lastname, then firstname\n                        const lnc = a.dataset.lastname.toLowerCase().localeCompare(b.dataset.lastname.toLowerCase());\n                        if (lnc !== 0) comparison = lnc;\n                        else comparison = a.dataset.firstname.toLowerCase().localeCompare(b.dataset.firstname.toLowerCase());\n                        break;\n                    case 'status': // Sort by attendance ratio (Yes / Total), then by total Yes count\n                        const tYA = parseInt(a.dataset.totalYes) || 0, tNA = parseInt(a.dataset.totalNo) || 0;\n                        const tYB = parseInt(b.dataset.totalYes) || 0, tNB = parseInt(b.dataset.totalNo) || 0;\n                        const totalA = tYA + tNA, totalB = tYB + tNB;\n                        const rA = totalA > 0 ? tYA / totalA : 0, rB = totalB > 0 ? tYB / totalB : 0;\n                        if (rA < rB) comparison = -1;\n                        else if (rA > rB) comparison = 1;\n                        else { if (tYA < tYB) comparison = -1; else if (tYA > tYB) comparison = 1; else comparison = 0; }\n                        break;\n                    default: return 0;\n                }\n                return currentSort.direction === 'asc' ? comparison : -comparison; // Apply direction\n            });\n\n            // Re-append sorted rows (and their detail rows) to the table body\n            rows.forEach((row, index) => {\n                const personIdx = row.dataset.personIdx; // Old index\n                const detailsRow = document.getElementById(`summary-person-details-${personIdx}`);\n                // Update data attributes and IDs if necessary (though re-indexing might not be strictly needed if DOM order is sufficient)\n                // row.dataset.personIdx = index; if (detailsRow) detailsRow.id = `summary-person-details-${index}`;\n                tbody.appendChild(row);\n                if (detailsRow) tbody.appendChild(detailsRow);\n            });\n            addSummaryPersonExpandFunctionality(); // Re-attach expand functionality after reordering\n        });\n    });\n}\n\n// Helper function (internal to this module)\n// Adds event listeners to filter inputs (dropdowns, text search) for the summary attendance table.\n// Filters the displayed rows based on selected criteria (section, event, status, name).\n// attendeesByPerson: The aggregated data used for filtering.\n// originalAttendees: The raw attendee list (not directly used here but good for context).\nfunction addSummaryAttendeeFiltering(attendeesByPerson, originalAttendees) {\n    const sectionFilter = document.getElementById('summary-section-filter');\n    const eventFilter = document.getElementById('summary-event-filter');\n    const statusFilter = document.getElementById('summary-status-filter');\n    const nameFilter = document.getElementById('summary-name-filter');\n    const clearButton = document.getElementById('summary-clear-filters-btn');\n\n    function applyFilters() {\n        const sectionVal = sectionFilter.value.toLowerCase();\n        const eventVal = eventFilter.value.toLowerCase();\n        const statusVal = statusFilter.value.toLowerCase();\n        const nameVal = nameFilter.value.toLowerCase();\n        let visibleCount = 0;\n\n        document.querySelectorAll('.summary-person-row').forEach(row => {\n            // Retrieve person data associated with the row. This assumes personIdx maps correctly to keys in attendeesByPerson.\n            // A more robust way might be to store the personKey directly on the row if Object.keys order is not guaranteed.\n            const personIdx = row.dataset.personIdx;\n            const personKeys = Object.keys(attendeesByPerson);\n            const personKey = personKeys[personIdx]; // This mapping could be fragile if original order changes\n            const person = attendeesByPerson[personKey];\n\n            if (!person) { // Safety check\n                row.style.display = 'none';\n                const detailsRow = document.getElementById(`summary-person-details-${personIdx}`);\n                if (detailsRow) detailsRow.style.display = 'none';\n                return;\n            }\n\n            // Check if person's name matches the name filter\n            const nameMatch = !nameVal || (person.firstname.toLowerCase().includes(nameVal) || person.lastname.toLowerCase().includes(nameVal));\n            // Check if any of the person's events match the section, event, and status filters\n            const eventsMatch = person.events.some(evt =>\n                (!sectionVal || evt.sectionname.toLowerCase().includes(sectionVal)) &&\n                (!eventVal || evt._eventName.toLowerCase().includes(eventVal)) &&\n                (!statusVal || evt.attending.toLowerCase().includes(statusVal))\n            );\n\n            const detailsRow = document.getElementById(`summary-person-details-${personIdx}`);\n            if (nameMatch && eventsMatch) {\n                row.style.display = ''; // Show row\n                if (detailsRow) detailsRow.style.display = 'none'; // Keep details collapsed initially\n                row.classList.remove('expanded');\n                const expandIcon = row.querySelector('.summary-expand-icon');\n                if (expandIcon) expandIcon.textContent = '▼';\n                visibleCount++;\n            } else {\n                row.style.display = 'none'; // Hide row\n                if (detailsRow) detailsRow.style.display = 'none';\n            }\n        });\n        document.getElementById('summary-attendee-count').textContent = visibleCount; // Update visible count\n    }\n\n    // Attach event listeners to filter inputs\n    [sectionFilter, eventFilter, statusFilter, nameFilter].forEach(f => {\n        if (f) {\n            f.addEventListener('change', applyFilters);\n            f.addEventListener('input', applyFilters); // For text input\n        }\n    });\n    if (clearButton) {\n        clearButton.addEventListener('click', () => {\n            [sectionFilter, eventFilter, statusFilter, nameFilter].forEach(f => { if (f) f.value = ''; });\n            applyFilters(); // Re-apply filters (which will show all rows)\n        });\n    }\n}\n\n// Renders the summary attendance table.\n// attendees: An array of attendee objects. Each object is expected to have properties like\n//            firstname, lastname, sectionname, _eventName, attending (status).\nfunction renderSummaryAttendanceTable(attendees) {\n    const summaryContent = document.getElementById('summary-content');\n    if (!summaryContent) return;\n\n    if (attendees.length === 0) {\n        summaryContent.innerHTML = `<p class=\"text-muted text-center\">No attendees found.</p>`;\n        return;\n    }\n\n    // Aggregate attendance data by person (firstname + lastname).\n    // attendeesByPerson will be an object where keys are \"Firstname Lastname\"\n    // and values are objects containing person's details and a list of their event attendances.\n    const attendeesByPerson = {};\n    attendees.forEach(attendee => {\n        const personKey = `${attendee.firstname} ${attendee.lastname}`;\n        if (!attendeesByPerson[personKey]) {\n            attendeesByPerson[personKey] = {\n                firstname: attendee.firstname,\n                lastname: attendee.lastname,\n                events: [], // List of events this person is associated with\n                totalYes: 0, // Count of 'Yes' responses\n                totalNo: 0   // Count of 'No' responses\n            };\n        }\n        attendeesByPerson[personKey].events.push(attendee);\n        if (attendee.attending === 'Yes') attendeesByPerson[personKey].totalYes++;\n        else if (attendee.attending === 'No') attendeesByPerson[personKey].totalNo++; // Assuming other statuses are not 'No'\n    });\n\n    // Extract unique values for filter dropdowns.\n    const uniqueSections = [...new Set(attendees.map(a => a.sectionname))].sort();\n    const uniqueEvents = [...new Set(attendees.map(a => a._eventName))].sort();\n    const uniqueStatuses = [...new Set(attendees.map(a => a.attending))].sort();\n\n    const isMobile = window.innerWidth <= 767; // Check for mobile view for layout adjustments.\n\n    // Start building HTML for the summary table, including filter controls.\n    let html = `<div class=\"d-flex justify-content-between align-items-center mb-3\"><h6 class=\"mb-0\">Attendance Summary</h6><small class=\"text-muted\"><span id=\"summary-attendee-count\">${Object.keys(attendeesByPerson).length}</span> person(s), <span id=\"summary-event-count\">${attendees.length}</span> record(s)</small></div>`;\n    // Filter dropdowns and name search input.\n    html += `<div class=\"row mb-3\"><div class=\"col-md-3 mb-2\"><select id=\"summary-section-filter\" class=\"form-select form-select-sm\"><option value=\"\">All Sections</option>${uniqueSections.map(s => `<option value=\"${s}\">${s}</option>`).join('')}</select></div><div class=\"col-md-3 mb-2\"><select id=\"summary-event-filter\" class=\"form-select form-select-sm\"><option value=\"\">All Events</option>${uniqueEvents.map(e => `<option value=\"${e}\">${e}</option>`).join('')}</select></div><div class=\"col-md-3 mb-2\"><select id=\"summary-status-filter\" class=\"form-select form-select-sm\"><option value=\"\">All Statuses</option>${uniqueStatuses.map(st => `<option value=\"${st}\">${st}</option>`).join('')}</select></div><div class=\"col-md-3 mb-2\"><input type=\"text\" id=\"summary-name-filter\" class=\"form-control form-control-sm\" placeholder=\"Search name...\"></div></div>`;\n    html += `<div class=\"mb-3\"><button id=\"summary-clear-filters-btn\" class=\"btn btn-outline-secondary btn-sm\">Clear Filters</button></div><div class=\"table-responsive\"><table id=\"summary-attendance-table\" class=\"table table-striped table-sm\">`;\n\n    // Table headers, adjusted for mobile view.\n    if (isMobile) {\n        html += `<thead><tr><th style=\"width: 70px;\" class=\"text-center sortable\" data-sort=\"status\">Status <span class=\"sort-arrow\">⇅</span></th><th class=\"sortable\" data-sort=\"name\">Name <span class=\"sort-arrow\">⇅</span></th><th style=\"width: 40px;\" class=\"text-center\">▼</th></tr></thead><tbody id=\"summary-attendance-tbody\">`;\n    } else {\n        html += `<thead><tr><th style=\"width: 120px;\" class=\"text-center sortable\" data-sort=\"status\">Attending <span class=\"sort-arrow\">⇅</span></th><th class=\"sortable\" data-sort=\"firstname\">First Name <span class=\"sort-arrow\">⇅</span></th><th class=\"sortable\" data-sort=\"lastname\">Last Name <span class=\"sort-arrow\">⇅</span></th><th style=\"width: 40px;\" class=\"text-center\">▼</th></tr></thead><tbody id=\"summary-attendance-tbody\">`;\n    }\n\n    // Iterate over each person to generate their summary row and expandable detail row.\n    Object.entries(attendeesByPerson).forEach(([personKey, person], personIdx) => {\n        // Main row for the person.\n        if (isMobile) {\n            html += `<tr class=\"summary-person-row\" data-person-idx=\"${personIdx}\" data-firstname=\"${person.firstname}\" data-lastname=\"${person.lastname}\" data-total-yes=\"${person.totalYes}\" data-total-no=\"${person.totalNo}\" style=\"cursor: pointer;\"><td class=\"text-center total-column\"><div class=\"d-flex flex-column\"><span class=\"text-success fw-bold\">${person.totalYes}</span><span class=\"text-danger small\">${person.totalNo}</span></div></td><td><div class=\"fw-bold\">${person.firstname} ${person.lastname}</div><small class=\"text-muted\">${person.events.length} event(s)</small></td><td class=\"text-center\"><span class=\"summary-expand-icon\">▼</span></td></tr>`;\n        } else {\n            html += `<tr class=\"summary-person-row\" data-person-idx=\"${personIdx}\" data-firstname=\"${person.firstname}\" data-lastname=\"${person.lastname}\" data-total-yes=\"${person.totalYes}\" data-total-no=\"${person.totalNo}\" style=\"cursor: pointer;\"><td class=\"text-center\"><span class=\"text-success fw-bold\">${person.totalYes}</span> / <span class=\"text-danger\">${person.totalNo}</span></td><td>${person.firstname}</td><td>${person.lastname}</td><td class=\"text-center\"><span class=\"summary-expand-icon\">▼</span></td></tr>`;\n        }\n        // Hidden detail row for this person, containing a sub-table of their event attendances.\n        html += `<tr class=\"summary-person-details-row\" id=\"summary-person-details-${personIdx}\" style=\"display: none;\"><td colspan=\"${isMobile ? 3 : 4}\" class=\"bg-light p-0\"><div class=\"table-responsive\"><table class=\"table table-sm mb-0\"><thead class=\"bg-secondary text-white\"><tr><th class=\"small\">Section</th><th class=\"small\">Event</th><th class=\"small text-center\">Status</th></tr></thead><tbody>`;\n        person.events.forEach(event => { html += `<tr><td class=\"small\">${event.sectionname||''}</td><td class=\"small\">${event._eventName||''}</td><td class=\"small text-center ${event.attending === 'Yes' ? 'text-success':'text-danger'}\"><strong>${event.attending||''}</strong></td></tr>`; });\n        html += `</tbody></table></div></td></tr>`;\n    });\n    html += `</tbody></table></div>`;\n    summaryContent.innerHTML = html; // Inject the complete table HTML.\n\n    // Invoke helper functions to add interactivity (row expansion, sorting, filtering).\n    addSummaryPersonExpandFunctionality();\n    addSummaryTableSorting(attendeesByPerson); // Pass data for context if needed by sorting/filtering logic\n    addSummaryAttendeeFiltering(attendeesByPerson, attendees);\n}\n\n// Renders the \"Grouped\" attendance table, where attendees are grouped by their status (Yes, No, Invited, etc.).\nfunction renderGroupedAttendanceTable(attendees) {\n    const groupedContent = document.getElementById('grouped-content');\n    if (!groupedContent) return;\n\n    // Group attendees by their attendance status.\n    const groupedAttendees = {};\n    attendees.forEach(attendee => {\n        const status = attendee.attending || attendee.status || 'Unknown'; // Normalize status\n        if (!groupedAttendees[status]) groupedAttendees[status] = [];\n        groupedAttendees[status].push(attendee);\n    });\n\n    // Define a priority for sorting status groups (e.g., 'Yes' first).\n    const statusPriority = { 'Yes': 1, 'No': 2, 'Invited': 3 }; // Lower number = higher priority\n    // Sort statuses by priority, then alphabetically.\n    const sortedStatuses = Object.keys(groupedAttendees).sort((a, b) => {\n        const pA = statusPriority[a] || 999, pB = statusPriority[b] || 999;\n        if (pA !== pB) return pA - pB;\n        return a.localeCompare(b);\n    });\n\n    if (sortedStatuses.length === 0) {\n        groupedContent.innerHTML = `<div class=\"text-center py-4\"><i class=\"fas fa-info-circle text-muted\" style=\"font-size: 2rem;\"></i><p class=\"text-muted mt-2\">No records.</p></div>`;\n        return;\n    }\n\n    const htmlParts = [];\n    // Generate HTML for each status group as a collapsible section.\n    sortedStatuses.forEach((status, index) => {\n        const records = groupedAttendees[status];\n        const isExpanded = index === 0; // Expand the first group by default.\n        const collapseId = `grouped-collapse-${status.replace(/\\s+/g, '-').toLowerCase()}`; // Unique ID for collapse element.\n        const color = getStatusColor(status); // Get color for status badge.\n\n        // Header for the collapsible section (status, count, expand/collapse icon).\n        htmlParts.push(`<div class=\"border-bottom\"><div class=\"d-flex justify-content-between align-items-center p-3 bg-light border-bottom cursor-pointer\" style=\"cursor:pointer;\" onclick=\"toggleGroupedSection('${collapseId}')\"><h6 class=\"mb-0\"><i class=\"fas fa-chevron-${isExpanded?'down':'right'} me-2\" id=\"icon-${collapseId}\"></i><span class=\"badge badge-${color} me-2\">${status}</span><span class=\"text-muted\">${records.length} attendees</span></h6></div>`);\n        // Collapsible content area with a table of attendees for this status.\n        htmlParts.push(`<div class=\"collapse ${isExpanded?'show':''}\" id=\"${collapseId}\"><div class=\"table-responsive\"><table class=\"table table-sm table-hover mb-0\"><thead class=\"thead-light\"><tr><th>Name</th><th>Section</th><th>Event</th><th>Date</th><th>Status</th></tr></thead><tbody>`);\n        records.forEach(attendee => {\n            htmlParts.push(`<tr><td><strong>${attendee.firstname||''} ${attendee.lastname||''}</strong></td><td>${attendee.sectionname||'-'}</td><td>${attendee._eventName||'-'}</td><td>${attendee._eventDate||'-'}</td><td><span class=\"badge badge-${color}\">${status}</span></td></tr>`);\n        });\n        htmlParts.push(`</tbody></table></div></div></div>`);\n    });\n    groupedContent.innerHTML = htmlParts.join(''); // Inject the HTML.\n}\n\n// Renders the \"Camp Groups\" table, which is a simple list of unique attendees.\n// This view is primarily intended for easily copying names for camp group planning.\nfunction renderCampGroupsTable(attendees) {\n    const campGroupsContent = document.getElementById('camp-groups-content');\n    if (!campGroupsContent) return;\n\n    if (attendees.length === 0) {\n        campGroupsContent.innerHTML = `<div class=\"text-center py-4\"><i class=\"fas fa-info-circle text-muted\" style=\"font-size:2rem;\"></i><p class=\"text-muted mt-2\">No attendees.</p></div>`;\n        return;\n    }\n\n    // Derive a list of unique attendees (by first and last name).\n    const uniqueAttendees = {};\n    attendees.forEach(attendee => {\n        const nameKey = `${attendee.firstname} ${attendee.lastname}`;\n        if (!uniqueAttendees[nameKey]) {\n            uniqueAttendees[nameKey] = {\n                firstname: attendee.firstname,\n                lastname: attendee.lastname,\n                sectionname: attendee.sectionname // Keep section name for context\n            };\n        }\n    });\n    const uniqueAttendeesList = Object.values(uniqueAttendees);\n\n    // Start building HTML for the list.\n    let html = `<div class=\"d-flex justify-content-between align-items-center mb-3 px-3 pt-3\"><h6 class=\"mb-0\"><i class=\"fas fa-campground me-2\"></i>Camp Groups</h6><small class=\"text-muted\">${uniqueAttendeesList.length} attendee(s)</small></div><div class=\"table-responsive\"><table class=\"table table-striped table-sm\"><thead class=\"thead-light\"><tr><th>Name</th></tr></thead><tbody>`;\n    // Sort unique attendees by last name, then first name.\n    uniqueAttendeesList.sort((a,b) => {\n        const lnc = a.lastname.localeCompare(b.lastname);\n        if (lnc !== 0) return lnc;\n        return a.firstname.localeCompare(b.firstname);\n    });\n    uniqueAttendeesList.forEach(attendee => {\n        html += `<tr><td><strong>${attendee.firstname} ${attendee.lastname}</strong><br><small class=\"text-muted\">${attendee.sectionname||'-'}</small></td></tr>`;\n    });\n    html += `</tbody></table></div><div class=\"px-3 pb-3\"><small class=\"text-muted\"><i class=\"fas fa-info-circle me-1\"></i>Simple list for camp groups.</small></div>`;\n    campGroupsContent.innerHTML = html; // Inject the HTML.\n}\n\n// Main function to render the tabbed interface for attendance views.\n// It sets up the tab structure and calls the respective rendering functions for each tab pane.\n// attendees: The array of all attendee data to be displayed across the tabs.\nexport function renderTabbedAttendanceView(attendees) {\n    const attendancePanel = document.getElementById('attendance-panel');\n    if (!attendancePanel) return;\n\n    // HTML structure for the tabs ('Summary', 'Detailed'/'Grouped', 'Camp Groups').\n    const tabsHtml = `\n        <div class=\"card shadow-sm h-100\">\n            <div class=\"card-header bg-info text-white\">\n                <div class=\"d-flex justify-content-between align-items-center\">\n                    <h5 class=\"mb-0\"><i class=\"fas fa-users\"></i> Attendance Records\n                        <span class=\"badge badge-light text-dark ms-2\">${attendees.length} total</span></h5>\n                </div>\n            </div>\n            <div class=\"card-body p-0\">\n                <nav>\n                    <div class=\"nav nav-tabs border-bottom\" id=\"nav-tab\" role=\"tablist\">\n                        <button class=\"nav-link active\" id=\"nav-summary-tab\" data-toggle=\"tab\" data-target=\"#nav-summary\" type=\"button\" role=\"tab\" aria-controls=\"nav-summary\" aria-selected=\"true\" onclick=\"switchAttendanceTab('summary')\">\n                            <i class=\"fas fa-table me-1\"></i> Summary\n                        </button>\n                        <button class=\"nav-link\" id=\"nav-grouped-tab\" data-toggle=\"tab\" data-target=\"#nav-grouped\" type=\"button\" role=\"tab\" aria-controls=\"nav-grouped\" aria-selected=\"false\" onclick=\"switchAttendanceTab('grouped')\">\n                            <i class=\"fas fa-layer-group me-1\"></i> Detailed\n                        </button>\n                        <button class=\"nav-link\" id=\"nav-camp-groups-tab\" data-toggle=\"tab\" data-target=\"#nav-camp-groups\" type=\"button\" role=\"tab\" aria-controls=\"nav-camp-groups\" aria-selected=\"false\" onclick=\"switchAttendanceTab('camp-groups')\">\n                            <i class=\"fas fa-campground me-1\"></i> Camp Groups\n                        </button>\n                    </div>\n                </nav>\n                <div class=\"tab-content\" id=\"nav-tabContent\">\n                    <div class=\"tab-pane fade show active\" id=\"nav-summary\" role=\"tabpanel\" aria-labelledby=\"nav-summary-tab\"><div id=\"summary-content\" class=\"p-0\"></div></div>\n                    <div class=\"tab-pane fade\" id=\"nav-grouped\" role=\"tabpanel\" aria-labelledby=\"nav-grouped-tab\"><div id=\"grouped-content\" class=\"p-0\"></div></div>\n                    <div class=\"tab-pane fade\" id=\"nav-camp-groups\" role=\"tabpanel\" aria-labelledby=\"nav-camp-groups-tab\"><div id=\"camp-groups-content\" class=\"p-0\"></div></div>\n                </div>\n            </div>\n        </div>`;\n    attendancePanel.innerHTML = tabsHtml; // Inject tab structure.\n\n    // Call the rendering functions to populate the content of each tab pane.\n    renderSummaryAttendanceTable(attendees);\n    renderGroupedAttendanceTable(attendees);\n    renderCampGroupsTable(attendees);\n}\n\n// Handles the visual switching between tabs in the attendance panel.\n// Updates 'active' classes on tab buttons and tab panes.\n// tabType: String identifying the tab to switch to ('summary', 'grouped', 'camp-groups').\nexport function switchAttendanceTab(tabType) {\n    // Deactivate all tabs and panes first.\n    document.querySelectorAll('#nav-tab .nav-link').forEach(tab => {\n        tab.classList.remove('active');\n        tab.setAttribute('aria-selected', 'false');\n    });\n    document.querySelectorAll('.tab-pane').forEach(pane => pane.classList.remove('show', 'active'));\n\n    // Activate the selected tab and its corresponding pane.\n    if (tabType === 'summary') {\n        document.getElementById('nav-summary-tab').classList.add('active');\n        document.getElementById('nav-summary-tab').setAttribute('aria-selected', 'true');\n        document.getElementById('nav-summary').classList.add('show', 'active');\n    } else if (tabType === 'grouped') {\n        document.getElementById('nav-grouped-tab').classList.add('active');\n        document.getElementById('nav-grouped-tab').setAttribute('aria-selected', 'true');\n        document.getElementById('nav-grouped').classList.add('show', 'active');\n    } else if (tabType === 'camp-groups') {\n        document.getElementById('nav-camp-groups-tab').classList.add('active');\n        document.getElementById('nav-camp-groups-tab').setAttribute('aria-selected', 'true');\n        document.getElementById('nav-camp-groups').classList.add('show', 'active');\n    }\n}\n\n// Handles the expand/collapse functionality for sections in the 'Grouped' attendance view.\n// Toggles the 'show' class on the collapsible element and updates the chevron icon.\n// collapseId: The ID of the collapsible element to toggle.\nexport function toggleGroupedSection(collapseId) {\n    const collapseElement = document.getElementById(collapseId);\n    const icon = document.getElementById(`icon-${collapseId}`); // Icon associated with this collapsible section.\n    if (collapseElement && icon) {\n        if (collapseElement.classList.contains('show')) {\n            collapseElement.classList.remove('show'); // Collapse\n            icon.classList.remove('fa-chevron-down');\n            icon.classList.add('fa-chevron-right'); // Change icon to 'expand'\n        } else {\n            collapseElement.classList.add('show'); // Expand\n            icon.classList.remove('fa-chevron-right');\n            icon.classList.add('fa-chevron-down'); // Change icon to 'collapse'\n        }\n    }\n}\n","// src/lib/handlers.js\n// This module is responsible for managing event handlers related to user\n// interactions, primarily selections made in the UI (e.g., selecting sections or events).\n// It orchestrates API calls to fetch necessary data (like terms, events, attendance)\n// and triggers UI updates to display this data based on user actions.\n\n// --- Imports ---\nimport { getMostRecentTermId, getEvents, getEventAttendance } from './api.js';\nimport { showSpinner, hideSpinner, showError, renderEventsTable, showBlockedScreen } from '../ui.js'; // Added showBlockedScreen\nimport { renderTabbedAttendanceView } from '../ui/attendance.js'; // Moved\n\n// --- Event Handlers ---\n\n// Dependencies for handleSectionSelect:\n// - showError (already imported from ui.js)\n// - showBlockedScreen (imported above from ui.js)\n// - showSpinner, hideSpinner (already imported from ui.js)\n// - currentSectionsData (now passed as a parameter)\n// - getMostRecentTermId, getEvents (already imported from api.js)\n// - renderEventsTable (already imported from ui.js)\n// - handleEventSelect (local to this module)\n\n// Handles the selection of one or more sections by the user.\n// Fetches events for the selected sections and renders them in a table.\nexport async function handleSectionSelect(selectedSectionIds, currentSectionsData) {\n    // Initial check: if OSM access is blocked, show an error and stop.\n    if (sessionStorage.getItem('osm_blocked') === 'true') {\n        showError('Application is blocked by OSM. Contact administrator.');\n        showBlockedScreen(); // Display a screen indicating access is blocked.\n        return;\n    }\n\n    // If no sections are selected, show an error message.\n    if (selectedSectionIds.length === 0) {\n        showError('Please select at least one section');\n        return;\n    }\n\n    showSpinner(); // Display a loading spinner to indicate background activity.\n    try {\n        let allEvents = []; // Array to accumulate events from all selected sections.\n\n        // Create a mapping of sectionId to sectionName from currentSectionsData.\n        // This is used to enrich event data with the section's name.\n        const sectionIdToName = {};\n        if (currentSectionsData && Array.isArray(currentSectionsData)) {\n            currentSectionsData.forEach(section => {\n                sectionIdToName[section.sectionid] = section.sectionname;\n            });\n        }\n\n        // Iterate through each selected section ID.\n        for (const sectionId of selectedSectionIds) {\n            // Fetch the most recent term ID for the current section.\n            // This is needed to scope the event fetching to the correct term.\n            const termId = await getMostRecentTermId(sectionId);\n            if (termId) {\n                // Fetch events for the current section and term.\n                const eventsData = await getEvents(sectionId, termId);\n                if (eventsData && eventsData.items) {\n                    // Augment each event with its section name and section ID.\n                    // This information is useful for display and further processing.\n                    const eventsWithSectionName = eventsData.items.map(event => ({\n                        ...event,\n                        sectionname: sectionIdToName[sectionId] || 'Unknown Section', // Fallback name\n                        sectionid: sectionId\n                    }));\n                    allEvents = allEvents.concat(eventsWithSectionName); // Add to the list of all events.\n                }\n            }\n        }\n        // Render the fetched events in a table.\n        // Pass a callback (handleEventSelect) to be invoked when events are selected from this table.\n        renderEventsTable(allEvents, (events) => handleEventSelect(events, currentSectionsData), true);\n\n    } catch (err) {\n        // If any error occurs during the process, show a generic error message.\n        showError('Failed to load events');\n        console.error(err);\n    } finally {\n        hideSpinner();\n    }\n}\n\n// Modified handleEventSelect to accept currentSectionsData, though it doesn't use it directly yet.\n// This is for consistency in how handlers might be called, especially if event selection needs context from all sections.\n\n// Handles the selection of one or more events by the user.\n// Fetches attendance data for the selected events and renders it in a tabbed view.\nexport async function handleEventSelect(selectedEvents, currentSectionsData) {\n    // If no events are selected, show an error message.\n    if (!selectedEvents || selectedEvents.length === 0) {\n        showError('Please select at least one event');\n        return;\n    }\n\n    showSpinner(); // Display a loading spinner.\n    try {\n        let allAttendees = []; // Array to accumulate attendance data from all selected events.\n\n        // Iterate through each selected event.\n        for (const event of selectedEvents) {\n            try {\n                // Log the event being processed for debugging.\n                console.log('Processing event:', {\n                    eventid: event.eventid,\n                    sectionid: event.sectionid,\n                    termid: event.termid,\n                    name: event.name\n                });\n\n                // Ensure termId is available for the event.\n                // Primarily, it should come directly from the event object (event.termid).\n                // As a fallback, if event.termid is missing, fetch the most recent termId for the event's section.\n                // This fallback might be necessary if the event data structure isn't guaranteed to include termid.\n                let termId = event.termid;\n                if (!termId) {\n                    console.warn(`TermID missing for event ${event.name}, attempting to fetch it.`);\n                    termId = await getMostRecentTermId(event.sectionid);\n                }\n\n                // Fetch attendance data for the current event, section, and term.\n                const attendanceData = await getEventAttendance(event.sectionid, event.eventid, termId);\n\n                console.log('Raw attendance data for event', event.name, ':', attendanceData);\n\n                // Process the fetched attendance data.\n                // The API might return data in an object with an 'items' array, or directly as an array.\n                if (attendanceData && attendanceData.items && attendanceData.items.length > 0) {\n                    // Augment each attendee record with section name, event name, and event date\n                    // from the parent event object for richer display in the attendance view.\n                    const eventAttendees = attendanceData.items.map(attendee => ({\n                        ...attendee,\n                        sectionname: event.sectionname, // From the event object, added in handleSectionSelect\n                        _eventName: event.name,          // Event's name\n                        _eventDate: event.date           // Event's date\n                    }));\n                    allAttendees = allAttendees.concat(eventAttendees); // Add to the list of all attendees.\n                } else if (attendanceData && Array.isArray(attendanceData) && attendanceData.length > 0) {\n                    // Handle cases where attendanceData is directly an array.\n                    const eventAttendees = attendanceData.map(attendee => ({\n                        ...attendee,\n                        sectionname: event.sectionname,\n                        _eventName: event.name,\n                        _eventDate: event.date\n                    }));\n                    allAttendees = allAttendees.concat(eventAttendees);\n                } else {\n                    // Log a warning if no attendance data is found for a specific event.\n                    console.warn('No attendance data found for event:', event.name, attendanceData);\n                }\n\n            } catch (eventError) {\n                // If fetching attendance for a specific event fails, log the error and continue with other events.\n                // This prevents one failed event from blocking the entire process.\n                console.error(`Failed to fetch attendance for event ${event.name}:`, eventError);\n                // Optionally, inform the user about the specific event failure here if desired.\n            }\n        }\n\n        // After processing all selected events:\n        if (allAttendees.length === 0) {\n            // If no attendance data was found for any of the selected events, show an error.\n            showError('No attendance data found for selected events. Some events might have had issues loading.');\n        } else {\n            // Otherwise, render the aggregated attendance data in a tabbed view.\n            renderTabbedAttendanceView(allAttendees);\n        }\n\n    } catch (err) {\n        // Catch any overall errors that occurred outside individual event processing.\n        showError('Failed to load attendees data');\n        console.error('Overall error:', err);\n    } finally {\n        hideSpinner();\n    }\n}\n","// src/lib/cache.js\n// This module is responsible for managing the local storage caching mechanism\n// for user section data. Caching helps in reducing API calls to the backend\n// and speeds up application load times by serving previously fetched data quickly.\n\n// --- Imports ---\nimport { getUserRoles } from './api.js';\nimport { renderSectionsTable, showError } from '../ui.js'; // Assuming these are in ui.js\nimport { handleSectionSelect } from './handlers.js'; // Passed as a callback\n\n// --- Constants ---\n// SECTIONS_CACHE_KEY: The key used for storing and retrieving the sections cache in localStorage.\nexport const SECTIONS_CACHE_KEY = 'viking_sections_cache';\n// SECTIONS_CACHE_EXPIRY: Defines the duration (in milliseconds) for which the cached data is considered valid.\n// Currently set to 24 hours.\nexport const SECTIONS_CACHE_EXPIRY = 24 * 60 * 60 * 1000; // 24 hours in milliseconds\n\n// --- Cache functions ---\n// Saves the user's section data to localStorage.\nexport function saveSectionsToCache(sections) {\n    try {\n        // Construct a cache object containing:\n        // - sections: The actual array of section data.\n        // - timestamp: The time (in milliseconds since epoch) when the data was cached.\n        // - version: A version number for the cache structure, useful for future migrations or format changes.\n        const cacheData = {\n            sections: sections,\n            timestamp: Date.now(),\n            version: '1.0' // Cache structure version\n        };\n        // Stringify the cache object to store it in localStorage, which only accepts strings.\n        localStorage.setItem(SECTIONS_CACHE_KEY, JSON.stringify(cacheData));\n        console.log(`Cached ${sections.length} sections to localStorage`);\n    } catch (error) {\n        // Log a warning if caching fails, e.g., due to localStorage being full or unavailable.\n        console.warn('Failed to cache sections:', error);\n    }\n}\n\n// Retrieves section data from the localStorage cache.\nexport function getSectionsFromCache() {\n    try {\n        // Retrieve the stringified cache data from localStorage using the defined cache key.\n        const cached = localStorage.getItem(SECTIONS_CACHE_KEY);\n        if (!cached) {\n            // If no data is found for the key, return null indicating no cache is available.\n            return null;\n        }\n\n        // Parse the JSON string back into an object.\n        const cacheData = JSON.parse(cached);\n        const now = Date.now();\n\n        // Check if the cache has expired by comparing the stored timestamp\n        // with the current time, against the defined cache expiry duration.\n        if (now - cacheData.timestamp > SECTIONS_CACHE_EXPIRY) {\n            console.log('Sections cache expired, removing...');\n            // If expired, remove the stale cache item from localStorage.\n            localStorage.removeItem(SECTIONS_CACHE_KEY);\n            return null; // Return null as the cache is no longer valid.\n        }\n\n        // If the cache is valid and not expired, log and return the sections data.\n        console.log(`Loaded ${cacheData.sections.length} sections from cache (version: ${cacheData.version || 'unknown'})`);\n        return cacheData.sections;\n    } catch (error) {\n        // If any error occurs during retrieval or parsing (e.g., corrupted data),\n        // log a warning and remove the potentially problematic cache item.\n        console.warn('Failed to load sections from cache:', error);\n        localStorage.removeItem(SECTIONS_CACHE_KEY); // Clean up potentially corrupted cache\n        return null;\n    }\n}\n\n// Removes the sections cache from localStorage.\n// This can be used for manually clearing the cache, e.g., on logout or for debugging.\nexport function clearSectionsCache() {\n    localStorage.removeItem(SECTIONS_CACHE_KEY);\n    console.log('Sections cache cleared');\n}\n\n// Loads section data, attempting to retrieve it from the cache first,\n// and falling back to an API call if the cache is unavailable or expired.\nexport async function loadSectionsFromCacheOrAPI() {\n    // Note: UI updates (loading indicators, error messages) are expected to be handled by the calling function.\n    try {\n        // Attempt to load sections from the local cache.\n        let sections = getSectionsFromCache();\n\n        if (sections) {\n            // If valid cached sections are found, return them immediately.\n            return sections;\n        } else {\n            // If no valid cached sections are found, proceed to fetch from the API.\n            console.log('No cached sections found or cache expired, loading from API...');\n            sections = await getUserRoles(); // Fetch sections using the getUserRoles API call.\n\n            if (sections && sections.length > 0) {\n                // If sections are successfully fetched from the API,\n                // save them to the cache for future use.\n                saveSectionsToCache(sections);\n                return sections; // Return the fetched sections.\n            } else {\n                // If the API returns no sections (or an empty array), log a warning.\n                console.warn('No sections returned from API');\n                return []; // Return an empty array to maintain consistent return type.\n            }\n        }\n    } catch (error) {\n        // If any error occurs during the process (cache read, API call, cache write),\n        // log the error and re-throw it so the caller can handle it appropriately (e.g., display an error message).\n        console.error('Failed to load sections from cache or API:', error);\n        throw error; // Re-throw to allow caller to handle UI for error state\n    }\n}\n","// src/ui.js\n// This module serves as a central hub for managing common UI elements and interactions\n// across the application. It includes functions for:\n// - Displaying various types of loading spinners.\n// - Showing and hiding modal-like elements (e.g., error toasts).\n// - Rendering skeleton loaders as content placeholders.\n// - Generating HTML tables for displaying data (e.g., sections, events).\n// - Controlling main UI layout components, such as the sidebar and its behavior.\n// - Handling specific UI states like API blocked screens or initial loading messages.\n\n// Configuration object for different loading animation styles.\nconst SPINNER_TYPES = {\n    DOTS: 'dots',    // A modern, pulsing dots animation.\n    RING: 'ring',    // A classic spinning ring animation.\n    GRADIENT: 'gradient' // A vibrant, colorful gradient spinner.\n};\n\n// Stores the currently selected default spinner type.\n// This can be changed by the application (e.g., from main.js based on preferences).\nlet currentSpinnerType = SPINNER_TYPES.DOTS; // Default to 'dots'.\n\n// --- Imports for UI functions ---\n// Corrected paths for when ui.js is in src/ui.js\nimport { loadSectionsFromCacheOrAPI } from './lib/cache.js';\nimport { addLogoutButton } from './lib/auth.js';\n\n// Allows changing the default loading animation style used by showSpinner.\n// type: A string matching one of the keys in SPINNER_TYPES.\nexport function setDefaultSpinner(type) {\n    if (Object.values(SPINNER_TYPES).includes(type)) {\n        currentSpinnerType = type;\n        console.log(`Loading animation set to: ${type}`);\n    } else {\n        console.warn(`Invalid spinner type: ${type}. Using default: ${currentSpinnerType}`);\n    }\n}\n\n// Displays a loading overlay with a spinner and optional text.\n// text: Custom text to display below the spinner.\n// spinnerType: The type of spinner animation to use (defaults to currentSpinnerType).\nexport function showSpinner(text = 'Loading...', spinnerType = currentSpinnerType) {\n    const overlay = document.getElementById('loading-overlay');\n    if (!overlay) {\n        // If the main loading overlay element isn't found in the DOM,\n        // create and display a simpler fallback spinner directly in the body.\n        console.warn('Loading overlay not found, creating fallback spinner');\n        createFallbackSpinner(text); // Create a temporary, full-screen spinner.\n        return;\n    }\n    const textEl = overlay.querySelector('.loading-text');\n    const spinnerContainer = overlay.querySelector('#spinner-container');\n    if (textEl) textEl.textContent = text; // Update the loading text.\n    if (spinnerContainer) {\n        spinnerContainer.innerHTML = ''; // Clear previous spinner.\n        const spinner = createSpinner(spinnerType); // Create the new spinner element.\n        spinnerContainer.appendChild(spinner);\n    }\n    overlay.style.display = 'flex'; // Make the overlay visible.\n    overlay.style.opacity = '0'; // Start with opacity 0 for fade-in effect.\n    // Use a short timeout to allow the display change to render, then transition opacity.\n    setTimeout(() => {\n        overlay.style.opacity = '0.9'; // Fade in to 90% opacity.\n    }, 50);\n}\n\n// Hides the loading overlay with a fade-out effect.\nexport function hideSpinner() {\n    const overlay = document.getElementById('loading-overlay');\n    if (!overlay) {\n        // If the main overlay isn't found, attempt to remove any fallback spinner.\n        const fallback = document.getElementById('fallback-spinner');\n        if (fallback) document.body.removeChild(fallback);\n        return;\n    }\n    overlay.style.opacity = '0'; // Fade out the overlay.\n    // After the opacity transition completes (300ms), set display to 'none'.\n    setTimeout(() => {\n        overlay.style.display = 'none';\n    }, 300);\n}\n\n// Internal helper function to create a simple, full-screen fallback spinner\n// when the main 'loading-overlay' element is not available.\nfunction createFallbackSpinner(text) {\n    const existing = document.getElementById('fallback-spinner');\n    if (existing) return; // Avoid creating multiple fallbacks.\n    const fallback = document.createElement('div');\n    fallback.id = 'fallback-spinner';\n    // Basic styling for the fallback spinner.\n    fallback.style.cssText = `position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 0.95); display: flex; align-items: center; justify-content: center; z-index: 9999; flex-direction: column;`;\n    fallback.innerHTML = `<div style=\"width: 40px; height: 40px; border: 4px solid #f3f3f3; border-top: 4px solid #007bff; border-radius: 50%; animation: spin 1s linear infinite; margin-bottom: 1rem;\"></div><div style=\"color: #6c757d; font-size: 0.9rem;\">${text}</div>`;\n    document.body.appendChild(fallback);\n}\n\n// Internal helper function to generate the HTML element for a specific spinner type.\n// type: A string matching one of the keys in SPINNER_TYPES.\nfunction createSpinner(type) {\n    const spinner = document.createElement('div');\n    // Assign CSS class based on the spinner type to apply the correct animation.\n    switch (type) {\n        case SPINNER_TYPES.DOTS: spinner.className = 'modern-spinner'; break;\n        case SPINNER_TYPES.RING: spinner.className = 'ring-spinner'; break;\n        case SPINNER_TYPES.GRADIENT: spinner.className = 'gradient-spinner'; break;\n        default: spinner.className = 'modern-spinner'; // Fallback to default.\n    }\n    return spinner;\n}\n\n// Displays a skeleton loader in a specified container or a default one.\n// Skeleton loaders provide a visual placeholder while content is being loaded,\n// improving perceived performance.\n// container: The DOM element where the skeleton loader HTML should be injected.\nexport function showSkeletonLoader(container) {\n    if (container) {\n        // If a specific container is provided, fill it with skeleton UI.\n        container.innerHTML = `<div class=\"skeleton-card\"><div class=\"skeleton-header\"></div><div class=\"skeleton-line\"></div><div class=\"skeleton-line short\"></div><div class=\"skeleton-line\"></div><div class=\"skeleton-line short\"></div><div class=\"skeleton-line\"></div></div>`;\n    } else {\n        // Otherwise, try to show a generic, pre-existing skeleton loader element.\n        const skeleton = document.getElementById('skeleton-loader');\n        if(skeleton) skeleton.style.display = 'block';\n    }\n}\n\n// Hides a generic, pre-existing skeleton loader element.\nexport function hideSkeletonLoader() {\n    const skeleton = document.getElementById('skeleton-loader');\n    if (skeleton) skeleton.style.display = 'none';\n}\n\n// Sets the visual state of a button to indicate loading.\n// buttonId: The ID of the button element.\n// loading: Boolean, true to show loading state, false to restore normal state.\n// text: Optional text to display on the button while loading.\nexport function setButtonLoading(buttonId, loading = true, text = 'Loading...') {\n    const button = document.getElementById(buttonId);\n    if (!button) return; // Do nothing if button not found.\n\n    if (loading) {\n        button.classList.add('btn-loading'); // Add a class for styling loading state.\n        button.disabled = true; // Disable the button.\n        // Store original content if not already stored, then set loading text.\n        if (!button.dataset.originalContent) button.dataset.originalContent = button.innerHTML;\n        button.innerHTML = `<span class=\"btn-text\">${text}</span>`;\n    } else {\n        button.classList.remove('btn-loading'); // Remove loading class.\n        button.disabled = false; // Re-enable the button.\n        // Restore original content if it was stored.\n        if (button.dataset.originalContent) {\n            button.innerHTML = button.dataset.originalContent;\n            delete button.dataset.originalContent; // Clean up stored data.\n        }\n    }\n}\n\n// Displays a non-blocking toast-like notification for errors.\n// msg: The error message to display.\nexport function showError(msg) {\n    const toast = document.createElement('div');\n    toast.className = 'error-toast'; // CSS class for styling.\n    // Structure of the toast notification.\n    toast.innerHTML = `<div class=\"error-toast-content\"><i class=\"fas fa-exclamation-circle\"></i><span>${msg}</span><button class=\"error-toast-close\">&times;</button></div>`;\n    document.body.appendChild(toast); // Add toast to the DOM.\n    // Show the toast with a slight delay for CSS transition.\n    setTimeout(() => toast.classList.add('show'), 10);\n    // Automatically hide and remove the toast after 5 seconds.\n    setTimeout(() => {\n        toast.classList.remove('show');\n        setTimeout(() => { if (toast.parentNode) toast.parentNode.removeChild(toast); }, 300); // Remove after fade out.\n    }, 5000);\n    // Allow manual closing of the toast.\n    toast.querySelector('.error-toast-close').addEventListener('click', () => {\n        toast.classList.remove('show');\n        setTimeout(() => { if (toast.parentNode) toast.parentNode.removeChild(toast); }, 300);\n    });\n}\n\n// Renders a table of sections in the specified container.\n// sections: An array of section objects to display.\n// onSelectionChange: Callback function invoked when section checkboxes are changed.\nexport function renderSectionsTable(sections, onSelectionChange) {\n    let container = document.getElementById('sections-table-container');\n    if (!container) { /* ... error handling or dynamic creation ... */ return; }\n\n    // Table HTML structure, including a refresh button.\n    // The refresh button clears the local cache and re-fetches sections from the API.\n    let html = `<div class=\"mb-3\"><div class=\"d-flex justify-content-end mb-2\"><button class=\"btn btn-outline-secondary btn-sm\" onclick=\"clearSectionsCache(); loadSectionsFromCacheOrAPI();\" title=\"Refresh sections from API\"><i class=\"fas fa-sync\"></i></button></div><table id=\"sections-table\" class=\"table table-striped table-sm\"><thead><tr><th style=\"width: 40px;\"></th><th>Section Name</th></tr></thead><tbody>`;\n    sections.forEach(section => {\n        const sectionId = section.sectionid || section.id || 'unknown'; // Handle potential variations in ID field name.\n        const sectionName = section.sectionname || section.name || 'Unknown Section'; // Handle potential variations in name field.\n        // Each row has a checkbox and the section name.\n        html += `<tr><td><input type=\"checkbox\" class=\"section-checkbox\" value=\"${sectionId}\"></td><td>${sectionName}</td></tr>`;\n    });\n    html += `</tbody></table></div>`;\n    container.innerHTML = html; // Inject the HTML into the container.\n\n    // Add event listeners to the newly created checkboxes.\n    const checkboxes = container.querySelectorAll('.section-checkbox');\n    checkboxes.forEach(checkbox => {\n        checkbox.addEventListener('change', () => {\n            // When a checkbox state changes, gather all selected section IDs.\n            const selectedSections = Array.from(container.querySelectorAll('.section-checkbox:checked')).map(cb => cb.value);\n            if (selectedSections.length > 0) {\n                // If there are selected sections, call the onSelectionChange callback with their IDs.\n                onSelectionChange(selectedSections);\n            } else {\n                // If no sections are selected, clear the events table container.\n                const eventsContainer = document.getElementById('events-table-container');\n                if (eventsContainer) eventsContainer.innerHTML = `<div class=\"text-center text-muted py-3\"><i class=\"fas fa-calendar-alt\"></i><p class=\"mb-0 mt-2\">Select sections to view events</p></div>`;\n            }\n        });\n    });\n}\n\n// Renders a table of events, adapting the layout for mobile or desktop views.\n// events: An array of event objects to display.\n// onLoadAttendees: Callback function invoked when event checkboxes are changed.\n// forceMobileLayout: Boolean to force mobile layout regardless of screen width (for testing/consistency).\nexport function renderEventsTable(events, onLoadAttendees, forceMobileLayout = false) {\n    let container = document.getElementById('events-table-container');\n    if (!container) { /* ... error handling or dynamic creation ... */ return; }\n\n    const isMobile = window.innerWidth <= 767 || forceMobileLayout; // Determine if mobile layout should be used.\n    let html;\n\n    if (isMobile) {\n        // Mobile layout: fewer columns, expandable rows for more details.\n        html = `<div class=\"table-responsive\"><table id=\"events-table\" class=\"table table-striped table-sm\"><thead><tr><th style=\"width: 40px;\"></th><th style=\"width: 70px;\" class=\"text-center\">Total</th><th>Event Details</th><th style=\"width: 40px;\"><i class=\"fas fa-expand-alt\" title=\"Tap rows to expand\"></i></th></tr></thead><tbody>`;\n        events.forEach((event, idx) => {\n            const totalYes = event.yes || 0;\n            const totalNo = event.no || 0;\n            // Checkbox, totals, event name/section/date, and an expand icon.\n            html += `<tr>\n                <td><input type=\"checkbox\" class=\"event-checkbox\" data-idx=\"${idx}\"></td>\n                <td class=\"text-center\">\n                    <div class=\"d-flex flex-column\">\n                        <span class=\"text-success fw-bold\">${totalYes}</span>\n                        <span class=\"text-danger small\">${totalNo}</span>\n                    </div>\n                </td>\n                <td>\n                    <div class=\"fw-bold\">${event.name || ''}</div>\n                    <small class=\"text-muted\">${event.sectionname || ''}</small>\n                    <br><small class=\"text-muted\">${event.date || ''}</small>\n                </td>\n                <td class=\"text-center\">\n                    <span class=\"expand-icon\">▼</span>\n                </td>\n            </tr>`;\n        });\n    } else {\n        // Desktop layout: more columns with detailed attendance breakdown.\n        html = `<div class=\"table-responsive\"><table id=\"events-table\" class=\"table table-striped table-sm\"><thead><tr><th style=\"width: 40px;\"></th><th style=\"min-width: 120px;\" data-sort=\"sectionname\">Section</th><th style=\"min-width: 150px;\" data-sort=\"name\">Event Name</th><th style=\"min-width: 100px;\" data-sort=\"date\">Date</th><th style=\"min-width: 60px;\" data-sort=\"yes\">Yes</th><th style=\"min-width: 80px;\" data-sort=\"yes_members\">Members</th><th style=\"min-width: 60px;\" data-sort=\"yes_yls\">YLs</th><th style=\"min-width: 80px;\" data-sort=\"yes_leaders\">Leaders</th><th style=\"min-width: 60px;\" data-sort=\"no\">No</th></tr></thead><tbody>`;\n        events.forEach((event, idx) => {\n            html += `<tr>\n                <td><input type=\"checkbox\" class=\"event-checkbox\" data-idx=\"${idx}\"></td>\n                <td class=\"text-nowrap\">${event.sectionname||''}</td>\n                <td class=\"event-name-cell\">${event.name||''}</td>\n                <td class=\"text-nowrap\">${event.date||''}</td>\n                <td class=\"text-center\">${event.yes||0}</td>\n                <td class=\"text-center\">${event.yes_members||0}</td>\n                <td class=\"text-center\">${event.yes_yls||0}</td>\n                <td class=\"text-center\">${event.yes_leaders||0}</td>\n                <td class=\"text-center\">${event.no||0}</td>\n            </tr>`;\n        });\n    }\n    html += `</tbody></table></div>`;\n    container.innerHTML = html; // Inject table HTML.\n\n    if (isMobile) addMobileExpandFunctionality(); // Helper function for mobile row expansion.\n    container.eventsData = events; // Store event data on the container for easy access.\n\n    // Add event listeners to event checkboxes.\n    const checkboxes = container.querySelectorAll('.event-checkbox');\n    checkboxes.forEach(checkbox => {\n        checkbox.addEventListener('change', () => {\n            // When a checkbox changes, gather all selected event objects.\n            const selectedEvents = Array.from(container.querySelectorAll('.event-checkbox:checked'))\n                .map(cb => events[parseInt(cb.dataset.idx)]); // Retrieve event object using stored index.\n            if (selectedEvents.length > 0) {\n                // If events are selected, call the onLoadAttendees callback.\n                onLoadAttendees(selectedEvents);\n            }\n        });\n    });\n    // Commenting out sortable headers as the function is not fully defined here.\n    // addSortableHeaders('events-table', events, sortedEvents => renderEventsTable(sortedEvents, onLoadAttendees, forceMobileLayout));\n}\n\n// Minimal addMobileExpandFunctionality (assuming it's defined elsewhere or simplified for this context)\n// This function would typically add event listeners to make table rows expandable on mobile.\nfunction addMobileExpandFunctionality() { /* ... Placeholder for mobile expand logic ... */ }\n// Minimal addSortableHeaders (assuming it's defined elsewhere or simplified for this context)\n// function addSortableHeaders(tableId, data, renderFunction) { /* ... Placeholder for table sorting logic ... */ }\n\n\n// --- General UI Functions (previously in main.js, then attendance.js, now correctly in ui.js) ---\n\n// Sets up the primary application interface after successful login.\n// This includes creating the main content area and initializing the sidebar.\nexport function showMainUI() {\n    const mainContainer = document.querySelector('main');\n    if (!mainContainer) { console.error('Main container not found'); return; }\n    // Basic structure for the main content area, including a placeholder for attendance details.\n    mainContainer.innerHTML = `<div class=\"container-fluid p-0\"><div class=\"row no-gutters\"><div class=\"col-12\"><div id=\"app-content\"><div id=\"attendance-panel\" class=\"mt-4\"><div class=\"card shadow-sm h-100\"><div class=\"card-header bg-info text-white\"><h5 class=\"mb-0\">Attendance Details</h5></div><div class=\"card-body\"><p class=\"text-muted text-center\">Use the sidebar to load sections and events, then view attendance details here.</p></div></div></div></div></div></div></div>`;\n\n    initializeSidebar(); // Set up sidebar functionality.\n\n    // Ensure sidebar content area exists, recreate if necessary (e.g., after login screen).\n    const sidebarContent = document.querySelector('.sidebar-content');\n    if (!sidebarContent) {\n        console.warn('Sidebar content not found, recreating...');\n        const sidebar = document.getElementById('sidebar');\n        if (sidebar) {\n            sidebar.innerHTML = `<div class=\"sidebar-header\"><h3>Sections & Events</h3></div><div class=\"sidebar-content\"><div id=\"sections-table-container\"></div><div id=\"events-table-container\" class=\"mt-3\"></div></div>`;\n        }\n    }\n    addLogoutButton(); // Add the logout button to the sidebar.\n    console.log('Main UI initialized - ready for sidebar interaction');\n}\n\n// Internal helper function for showMainUI to set up sidebar interactions.\n// This includes the toggle button, overlay, and event listeners for opening/closing.\nfunction initializeSidebar() {\n    const sidebar = document.getElementById('sidebar');\n    const toggleBtn = document.getElementById('sidebarToggle');\n    const overlay = document.getElementById('sidebarOverlay'); // Overlay for closing sidebar on click outside.\n    if (!sidebar || !toggleBtn) { console.warn('Sidebar elements not found for initialization.'); return; }\n    \n    // Function to close the sidebar.\n    function closeSidebar() {\n        sidebar.classList.remove('open'); // CSS class controls visibility/animation.\n        document.body.classList.remove('sidebar-open'); // Body class for potential global styles.\n        if (overlay) overlay.classList.remove('show'); // Hide overlay.\n        toggleBtn.style.left = '1rem'; // Reset toggle button position.\n    }\n    \n    // Event listener for the sidebar toggle button.\n    toggleBtn.addEventListener('click', () => {\n        if (sidebar.classList.contains('open')) {\n            closeSidebar();\n        } else {\n            sidebar.classList.add('open');\n            document.body.classList.add('sidebar-open');\n            if (overlay) overlay.classList.add('show');\n            // Adjust toggle button position when sidebar is open for better UX.\n            toggleBtn.style.left = '340px'; // Assuming sidebar width is around 320-340px.\n        }\n    });\n    \n    // Event listener for the overlay (closes sidebar on click).\n    if (overlay) overlay.addEventListener('click', closeSidebar);\n    \n    // Event listener for clicks outside the sidebar (closes sidebar).\n    document.addEventListener('click', (e) => {\n        if (\n            sidebar.classList.contains('open') && // Sidebar is open\n            !sidebar.contains(e.target) &&      // Click was outside the sidebar\n            e.target !== toggleBtn &&           // Click was not on the toggle button itself\n            !toggleBtn.contains(e.target)       // Click was not within the toggle button\n        ) {\n            closeSidebar();\n        }\n    });\n    \n    // Event listener for 'Escape' key to close the sidebar.\n    document.addEventListener('keydown', (e) => {\n        if (e.key === 'Escape' && sidebar.classList.contains('open')) {\n            closeSidebar();\n        }\n    });\n}\n\n// Shows or hides the sidebar toggle button based on whether the login screen is active.\n// The toggle button should typically be hidden on the login screen.\nexport function updateSidebarToggleVisibility() {\n    const sidebarToggle = document.getElementById('sidebarToggle');\n    if (sidebarToggle) {\n        const isLoginScreen = document.body.classList.contains('login-screen');\n        sidebarToggle.style.display = isLoginScreen ? 'none' : 'block';\n    }\n}\n\n// Renders a prominent error message and UI state when API access has been blocked by OSM.\n// This is a critical state, and the UI reflects this by disabling most functionality.\nexport function showBlockedScreen() {\n    const mainContainer = document.querySelector('main.container') || document.querySelector('main');\n    if (!mainContainer) { console.error('Main container not found for blocked screen'); return; }\n    document.body.classList.add('login-screen'); // Use login screen styling for consistency.\n    updateSidebarToggleVisibility(); // Hide sidebar toggle.\n    mainContainer.style.display = 'block';\n    mainContainer.className = 'container'; // Ensure consistent container styling.\n    // HTML for the blocked screen, including error messages and an admin option to clear status.\n    mainContainer.innerHTML = `<div class=\"row justify-content-center\"><div class=\"col-12 col-sm-10 col-md-8 col-lg-6\"><div class=\"card shadow border-danger mb-4\"><div class=\"card-header bg-danger text-white text-center\"><h3 class=\"mb-0\">🚨 CRITICAL ERROR</h3></div><div class=\"card-body text-center p-4\"><div class=\"alert alert-danger mb-4\"><h4 class=\"alert-heading\">API Access Blocked!</h4><p class=\"mb-0\">This application has been <strong>blocked by Online Scout Manager</strong> and can no longer access OSM data.</p></div><div class=\"mb-4\"><i class=\"fas fa-ban text-danger\" style=\"font-size: 4rem;\"></i></div><h5 class=\"text-danger mb-3\">Application Suspended</h5><p class=\"text-muted mb-4\">All API functionality has been disabled. <strong>Contact admin.</strong></p><div class=\"bg-light p-3 rounded mb-4\"><small class=\"text-muted\"><strong>Blocked at:</strong> ${new Date().toLocaleString()}<br><strong>Session ID:</strong> ${sessionStorage.getItem('access_token')?.substring(0, 12) || 'N/A'}...</small></div><button onclick=\"alert('Application is blocked. Contact administrator.')\" class=\"btn btn-danger btn-lg disabled mb-3\"><i class=\"fas fa-ban me-2\"></i>Application Blocked</button><div class=\"mt-3\"><small class=\"text-muted\"><a href=\"#\" onclick=\"if(confirm('Clear blocked status?')) { sessionStorage.removeItem('osm_blocked'); window.location.reload(); }\" class=\"text-secondary\">Admin: Clear Blocked Status</a></small></div></div></div></div></div>`;\n}\n\n// Displays a simple loading message within the main container.\n// Typically used during initial application load or authentication checks before the main UI is ready.\nexport function showLoadingState() {\n    const mainContainer = document.querySelector('main.container') || document.querySelector('main');\n    if (!mainContainer) { console.error('Main container not found for loading state'); return; }\n    mainContainer.style.display = 'block';\n    // Simple HTML structure with a spinner and loading text.\n    mainContainer.innerHTML = `<div class=\"row justify-content-center\"><div class=\"col-12 col-sm-8 col-md-6 col-lg-4\"><div class=\"card shadow-sm mb-4\"><div class=\"card-body text-center\"><div class=\"spinner-border text-primary mb-3\" role=\"status\"><span class=\"sr-only\">Loading...</span></div><p class=\"text-muted\">Loading application...</p></div></div></div></div>`;\n}\n","// src/lib/auth.js\n// This module is responsible for all authentication-related logic.\n// It manages access tokens, handles the OAuth flow with Online Scout Manager (OSM),\n// and controls UI changes based on the user's authentication state.\n\n// --- Imports ---\nimport { getUserRoles } from './api.js';\n// Assuming these UI functions will be available from ui.js or similar\nimport { showBlockedScreen, showLoadingState, updateSidebarToggleVisibility, showMainUI } from '../ui.js';\n\n// --- Constants ---\n// clientId: The unique identifier for this application registered with Online Scout Manager (OSM).\nconst clientId = 'x7hx1M0NExVdSiksH1gUBPxkSTn8besx';\n// scope: Defines the permissions requested from OSM (e.g., reading section members, programme, events).\nconst scope = 'section:member:read section:programme:read section:event:read';\n// redirectUri: The URL to which OSM redirects the user after authentication.\n// Note: This is dynamically constructed in the showLoginScreen function based on the current window origin.\n\n// --- Auth functions originally from api.js ---\n// Retrieves the access token from sessionStorage.\nexport function getToken() {\n    return sessionStorage.getItem('access_token');\n}\n\n// Checks specific error conditions in API responses that indicate an invalid or expired token.\n// responseData: The data object from an API response.\nexport function isTokenValid(responseData) {\n    if (responseData && (\n        (responseData.status === false && responseData.error && responseData.error.code === 'access-error-2') || // Specific OSM error\n        responseData.error === 'Invalid access token' || // General invalid token error\n        responseData.message === 'Unauthorized' || // Standard unauthorized message\n        responseData.error === 'Token expired' // Specific token expired error\n    )) {\n        return false; // Token is considered invalid\n    }\n    return true; // Token is considered valid\n}\n\n// Handles the situation when an access token has expired or is invalid.\n// Actions include:\n// - Logging the event.\n// - Removing the token from sessionStorage.\n// - Clearing any cached data (e.g., sections cache).\n// - Alerting the user about the session expiration (skipped in test environments).\n// - Reloading the page to force re-authentication (skipped in test environments).\nexport function handleTokenExpiration() {\n    console.log('Token expired - redirecting to login');\n    sessionStorage.removeItem('access_token'); // Remove the expired token\n    localStorage.removeItem('viking_sections_cache'); // Clear cached data that might be stale\n\n    // Check if running in a test environment (e.g., Jest with jsdom)\n    const isTestEnvironment = typeof jest !== 'undefined' ||\n                             (typeof window !== 'undefined' && window.navigator && window.navigator.userAgent === 'jsdom');\n\n    if (isTestEnvironment) {\n        console.log('Test environment detected - skipping alert and page reload');\n        return; // Do not alert or reload in tests\n    }\n    // In a browser environment, alert the user and reload the page.\n    if (typeof window !== 'undefined' && window.alert) {\n        alert('Your session has expired. Please log in again.');\n    }\n    if (typeof window !== 'undefined' && window.location) {\n        window.location.reload();\n    }\n}\n\n// Removes the access token from sessionStorage.\nexport function clearToken() {\n    sessionStorage.removeItem('access_token');\n    console.log('Authentication token cleared');\n}\n\n// Checks if an access token exists in sessionStorage, indicating an authenticated user.\n// Returns true if a token exists, false otherwise.\nexport function isAuthenticated() {\n    return !!getToken(); // Double negation converts the token string (or null) to a boolean\n}\n\n// --- Auth functions originally from main.js ---\n// Displays the login screen, allowing users to authenticate via Online Scout Manager (OSM).\nexport function showLoginScreen() {\n    console.log('Showing login screen');\n    // Dynamically construct the redirect URI based on the current window's origin.\n    // This ensures the callback works correctly across different deployment environments (e.g., localhost, production).\n    const redirectUri = window.location.origin + '/callback.html';\n\n    // Check if a login button already exists in the DOM.\n    // This can happen if the login screen was previously rendered or is part of the static HTML.\n    const existingLoginBtn = document.getElementById('osm-login-btn');\n    if (existingLoginBtn) {\n        // If an existing button is found, ensure the main container is visible\n        // and attach the OAuth click handler to it.\n        const mainContainer = document.querySelector('main.container') || document.querySelector('main');\n        if (mainContainer) mainContainer.style.display = 'block'; // Make sure the container is visible\n        existingLoginBtn.onclick = () => {\n            // Construct the OSM OAuth authorization URL.\n            // This URL redirects the user to OSM's login page.\n            const authUrl = `https://www.onlinescoutmanager.co.uk/oauth/authorize?` +\n                `client_id=${clientId}&` + // Application's client ID\n                `redirect_uri=${encodeURIComponent(redirectUri)}&` + // Where OSM redirects after auth\n                `scope=${encodeURIComponent(scope)}&` + // Permissions requested\n                `response_type=code`; // OAuth flow type (Authorization Code Grant)\n            window.location.href = authUrl; // Redirect the user to OSM\n        };\n        return; // Login button is set up, no need to create new UI.\n    }\n\n    // If no existing login button, create the login UI from scratch.\n    const mainContainer = document.querySelector('main.container') || document.querySelector('main');\n    if (!mainContainer) {\n        console.error('Main container not found for login screen');\n        return; // Cannot proceed without a main container\n    }\n\n    mainContainer.style.display = 'block'; // Ensure the main container is visible\n    mainContainer.className = 'container'; // Reset or set class for styling\n    // Populate the main container with the login UI structure.\n    mainContainer.innerHTML = `\n        <div class=\"row justify-content-center\">\n            <div class=\"col-12 col-sm-8 col-md-6 col-lg-4\">\n                <div class=\"card shadow-sm mb-4\">\n                    <div class=\"card-body text-center\">\n                        <button id=\"osm-login-btn\"\n                            class=\"btn btn-primary btn-lg mb-3\"\n                            style=\"font-size:1.5em; white-space: normal; line-height: 1.2;\">\n                            Login with<br>Online Scout Manager (OSM)\n                        </button>\n                        <div id=\"app-content\"></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `;\n\n    // Get the newly created login button and attach the event listener.\n    const loginBtn = document.getElementById('osm-login-btn');\n    if (loginBtn) {\n        loginBtn.addEventListener('click', () => {\n            // Construct the OSM OAuth authorization URL, same as above.\n            const authUrl = `https://www.onlinescoutmanager.co.uk/oauth/authorize?` +\n                `client_id=${clientId}&` +\n                `redirect_uri=${encodeURIComponent(redirectUri)}&` +\n                `scope=${encodeURIComponent(scope)}&` +\n                `response_type=code`;\n            window.location.href = authUrl; // Redirect the user to OSM\n        });\n    }\n}\n\n// Checks for an existing access token and validates it to determine the user's authentication state.\n// This function is typically called on application load.\nexport async function checkForToken() {\n    console.log('Checking for token...');\n    // First, check if OSM API access has been flagged as blocked.\n    if (sessionStorage.getItem('osm_blocked') === 'true') {\n        console.error('🚨 Application is blocked - showing blocked screen');\n        showBlockedScreen(); // Display a screen indicating access is blocked\n        return; // Halt further execution\n    }\n\n    showLoadingState(); // Display a loading indicator while checking token validity\n\n    try {\n        const token = getToken(); // Retrieve token from sessionStorage\n        if (token) {\n            // If a token exists, attempt to validate it by making a lightweight API call (e.g., fetching user roles).\n            console.log('Token found, testing validity...');\n            await getUserRoles(); // This call will implicitly use the token and fail if it's invalid\n            // If getUserRoles succeeds, the token is considered valid.\n            console.log('Token is valid, showing main UI');\n            document.body.classList.remove('login-screen'); // Remove login-specific body class\n            updateSidebarToggleVisibility(); // Update UI elements like sidebar visibility\n            showMainUI(); // Display the main application interface\n        } else {\n            // If no token is found, the user is not authenticated.\n            console.log('No token found, showing login');\n            document.body.classList.add('login-screen'); // Add login-specific body class\n            updateSidebarToggleVisibility(); // Update UI elements\n            showLoginScreen(); // Display the login screen\n        }\n    } catch (error) {\n        // If token validation fails (e.g., API call returns an auth error), treat as unauthenticated.\n        console.error('Token validation failed:', error);\n        sessionStorage.removeItem('access_token'); // Remove the invalid token\n        document.body.classList.add('login-screen'); // Add login-specific body class\n        updateSidebarToggleVisibility(); // Update UI elements\n        showLoginScreen(); // Display the login screen\n    }\n}\n\n// Dynamically adds a logout button to the sidebar.\n// The button includes a click handler to clear the authentication token and reload the page.\nexport function addLogoutButton() {\n    const sidebar = document.querySelector('.sidebar-content'); // Target the sidebar container\n    // Add button only if sidebar exists and logout button isn't already there.\n    if (sidebar && !document.getElementById('logout-btn')) {\n        const logoutBtn = document.createElement('button');\n        logoutBtn.id = 'logout-btn';\n        logoutBtn.className = 'btn btn-outline-danger btn-sm w-100 mt-3';\n        logoutBtn.innerHTML = '<i class=\"fas fa-sign-out-alt\"></i> Logout';\n        logoutBtn.onclick = () => {\n            if (confirm('Are you sure you want to logout?')) {\n                clearToken();\n                window.location.reload();\n            }\n        };\n        sidebar.appendChild(logoutBtn);\n    }\n}\n","// src/main.js\n// This file serves as the primary entry point for the application.\n// It is responsible for initializing the application, handling authentication,\n// loading initial data, and setting up the main UI components.\n\n// ===== LOADING ANIMATION CONFIGURATION =====\n// Choose your preferred loading animation:\n// 'dots' = Pulsing dots (minimal, clean)\n// 'ring' = Spinning ring (classic, smooth)\n// 'gradient' = Colorful gradient spinner (modern, vibrant)\nconst PREFERRED_SPINNER = 'ring'; // Change this to your preference\n\n// Initialize error monitoring (conditionally for production)\ntry {\n    // Only load Sentry in production or when explicitly enabled\n    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {\n        import('./sentry.js').catch(error => {\n            console.warn('Sentry initialization failed:', error);\n        });\n    }\n} catch (error) {\n    console.warn('Error monitoring not available:', error);\n}\n\n// Import functions from new lib structure\nimport { checkForToken, addLogoutButton, showLoginScreen } from './lib/auth.js';\nimport { loadSectionsFromCacheOrAPI, clearSectionsCache } from './lib/cache.js';\nimport { handleSectionSelect, handleEventSelect } from './lib/handlers.js';\n\n// Imports from ui.js\nimport {\n    setDefaultSpinner,\n    showMainUI,\n    renderSectionsTable, // For rendering sections after load\n    showError, // For error handling\n    // Keeping these general utilities in case any remaining main.js code needs them.\n    showSpinner,\n    hideSpinner,\n    setButtonLoading\n} from './ui.js';\nimport {\n    switchAttendanceTab, // For window assignment\n    toggleGroupedSection // For window assignment\n} from './ui/attendance.js';\n\n// Note: The Sentry import logic remains unchanged, handled by its own try/catch block.\n// Constants clientId, scope are now defined in auth.js as they are used by showLoginScreen.\n// redirectUri is dynamically constructed in showLoginScreen.\n\nlet currentSections = [];\n\n// Add this function to check for required elements before initialization:\n// Returns a Promise that resolves when the DOM is fully loaded,\n// ensuring that scripts execute only after the document structure is ready.\nfunction waitForDOM() {\n    return new Promise((resolve) => {\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', resolve);\n        } else {\n            resolve();\n        }\n    });\n}\n\n\n// Make sure your DOMContentLoaded listener looks like this:\n\ndocument.addEventListener('DOMContentLoaded', async function initializeApp() {\n    try {\n        const mainContainer = document.querySelector('main.container') || document.querySelector('main');\n        if (mainContainer) {\n            // Hide the main container initially to prevent Flash of Unstyled Content (FOUC)\n            // while the application is loading and initializing.\n            mainContainer.style.display = 'none'; // Prevent FOUC\n        }\n        \n        setDefaultSpinner(PREFERRED_SPINNER);\n        \n        if (!mainContainer) {\n            console.error('Critical: Main container not found. App cannot start.');\n            return;\n        }\n        \n        // checkForToken will show login or basic main UI (without data)\n        await checkForToken(); // Imported from lib/auth.js\n        \n        // If user is authenticated (i.e., not on login screen), load and render sections.\n        // The body will not have 'login-screen' class if authenticated.\n        if (!document.body.classList.contains('login-screen')) {\n            const sectionsContainer = document.getElementById('sections-table-container');\n            if (sectionsContainer) {\n                sectionsContainer.innerHTML = `<div class=\"text-center py-3\"><div class=\"spinner-border spinner-border-sm text-primary\"></div> <small class=\"text-muted ms-2\">Loading sections...</small></div>`;\n            }\n            try {\n                const sectionsData = await loadSectionsFromCacheOrAPI(); // Imported from lib/cache.js\n                if (sectionsData) {\n                    // Update the global currentSections variable with the loaded data.\n                    currentSections = sectionsData; // Update global currentSections\n                    // Render the sections table with the loaded sections.\n                    // The handleSectionSelect callback is provided to handle section selection events.\n                    renderSectionsTable(currentSections, (selectedIds) => {\n                        handleSectionSelect(selectedIds, currentSections); // handleSectionSelect from lib/handlers.js\n                    });\n                } else if (sectionsContainer) { // Handle case where sectionsData is null/empty but no error thrown\n                    sectionsContainer.innerHTML = `<div class=\"alert alert-info\">No sections found or an issue occurred.</div>`;\n                }\n            } catch (error) {\n                console.error('Error loading sections in main.js:', error);\n                if (sectionsContainer) { // Show error in the specific container\n                    sectionsContainer.innerHTML = `<div class=\"alert alert-danger alert-sm\"><i class=\"fas fa-exclamation-triangle\"></i> Failed to load sections. <button class=\"btn btn-outline-primary btn-sm float-end\" onclick=\"window.location.reload()\">Retry</button></div>`;\n                } else { // Fallback to general showError if container isn't there\n                    showError('Failed to load sections data. Please try refreshing.');\n                }\n            }\n        }\n\n    } catch (error) { // Catch errors from checkForToken or other setup\n        console.error('App initialization failed:', error);\n        showFallbackError(); // General fallback for critical errors\n    }\n});\n\n// Displays a generic error message directly in the DOM when critical initialization fails.\n// This provides a user-friendly way to suggest a page refresh.\nfunction showFallbackError() {\n    const body = document.body;\n    if (body) {\n        const errorDiv = document.createElement('div');\n        errorDiv.innerHTML = `\n            <div style=\"position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); \n                        background: white; padding: 2rem; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n                        text-align: center; max-width: 400px;\">\n                <h3 style=\"color: #dc3545; margin-bottom: 1rem;\">Application Error</h3>\n                <p style=\"margin-bottom: 1.5rem;\">Failed to load the application. Please refresh the page.</p>\n                <button onclick=\"window.location.reload()\" \n                        style=\"padding: 0.75rem 1.5rem; background: #007bff; color: white; \n                               border: none; border-radius: 4px; cursor: pointer;\">\n                    Refresh Page\n                </button>\n            </div>\n        `;\n        body.appendChild(errorDiv);\n    }\n}\n\nasync function validateTokenAndShowUI() {\n    try {\n        // Make a quick API call to test the token\n        const roles = await getUserRoles();\n        if (roles && roles.length >= 0) {\n            // Token is valid, show main UI\n            showMainUI();\n        } else {\n            // Token invalid, show login\n            showLoginScreen();\n        }\n    } catch (error) {\n        console.log('Token validation failed:', error);\n        // Clear invalid token and show login\n        sessionStorage.removeItem('access_token');\n        showLoginScreen();\n    }\n}\n\n// Make functions globally available for HTML onclick handlers and legacy access\nwindow.switchAttendanceTab = switchAttendanceTab; // switchAttendanceTab is still in main.js\nwindow.clearSectionsCache = clearSectionsCache; // Imported from ./lib/cache.js\nwindow.loadSectionsFromCacheOrAPI = loadSectionsFromCacheOrAPI; // Imported from ./lib/cache.js\n"],"file":"assets/main-DHBuiGW2.js"}